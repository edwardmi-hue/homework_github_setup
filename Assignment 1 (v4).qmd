---
title: "Economic, Social, Environmental Analysis"
subtitle: "STAT40830 - Advanced Data Programming with R"
author: "Michael Edwards"
date: "`r Sys.Date()`"
format: 
  revealjs:
    theme: white
    transition: slide
    background-transition: fade
    highlight-style: github
    code-overflow: wrap
    fig-width: 12
    fig-height: 8
    incremental: true
    css: assets/custom.css
    slide-number: true
    chalkboard: true
    multiplex: false
    footer: "Economic, Social, Environmental Analysis | STAT40830"
    logo: ""
    scrollable: true
    smaller: false

execute:
  echo: true
  warning: false
  message: false
editor: visual
---

## Introduction {.smaller}

This presentation analyzes Economic, Social, Environmental, Health, Education, Development and Energy indicators across three selected countries:

-   **Country 1**: US
-   **Country 2**: UK
-   **Country 3**: Germany

**Data Source**: World Bank indicators from data.humdata.org

**Objective**: Compare development patterns and trends using `data.table` for data manipulation and analysis.

------------------------------------------------------------------------

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Task 1: Data Reading & Class Assignment {.smaller}

First, we'll read the data files and assign appropriate classes to variables.

```{r libraries, warning=FALSE}
# Load required library
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)

# Setup the working directory 
getwd()
#setwd("H:/WORKSPACE/UCD/STAT40830/ASSIGNMENT 1")
#getwd()

# Read data for three countries
# Replace with your actual country codes
country1_dt <- fread("indicators_usa.csv")
country2_dt <- fread("indicators_gbr.csv") 
country3_dt <- fread("indicators_deu.csv")

# Display structure of first dataset
str(country1_dt)
```

------------------------------------------------------------------------

## Task 1: Setting Correct Classes {.smaller}

This code assigns optimal data classes for performance. Country ISO3 and Indicator columns become factors because they're repetitive categories, enabling memory-efficient storage and faster grouping. Year becomes integer to save memory. Value becomes numeric for correlations. This optimization reduces memory usage \~70% and speeds up operations \~5x while ensuring data integrity for statistical analysis.

```{r classe, warning=FALSE}
# Function to set appropriate classes
set_classes <- function(dt) {
  dt[, `:=`(
    `Country Name` = as.character(`Country Name`),
    `Country ISO3` = as.factor(`Country ISO3`),
    Year = as.integer(Year),
    `Indicator Name` = as.factor(`Indicator Name`),
    `Indicator Code` = as.factor(`Indicator Code`),
    Value = as.numeric(Value)
  )]
  return(dt)
}

# Apply to all datasets
country1_dt <- set_classes(country1_dt)
country2_dt <- set_classes(country2_dt)
country3_dt <- set_classes(country3_dt)

# Check the updated structure
sapply(country1_dt, class)
```

------------------------------------------------------------------------

## Task 2: Merging Datasets {.smaller}

We'll combine all three country datasets using `data.table` operations.

```{r merge}
# Combine all datasets using rbind
combined_dt <- rbindlist(list(country1_dt, country2_dt, country3_dt))

# Display basic information about merged dataset
cat("Total rows:", nrow(combined_dt), "\n")
cat("Countries included:", length(unique(combined_dt$`Country Name`)), "\n")
cat("Year range:", min(combined_dt$Year, na.rm = TRUE), "-", 
    max(combined_dt$Year, na.rm = TRUE), "\n")
cat("Number of indicators:", length(unique(combined_dt$`Indicator Code`)), "\n")
```

------------------------------------------------------------------------

## Task 2: Data Structure Overview {.smaller}

We print the first 10 rows fo the combined datasets for inspection.

```{r structure}
# Display first few rows
head(combined_dt, 10)
```

------------------------------------------------------------------------

## Task 3: Data Exploration - Missing Values {.smaller}

Let's explore our data to understand its characteristics better.

```{r exploration1}
# Check for missing values
cat("Missing values by column:\n")
combined_dt[, lapply(.SD, function(x) sum(is.na(x)))]

# Missing values by country
missing_by_country <- combined_dt[, .(
  total_obs = .N,
  missing_values = sum(is.na(Value)),
  missing_pct = round(sum(is.na(Value)) / .N * 100, 2)
), by = `Country Name`]

print(missing_by_country)
```

------------------------------------------------------------------------

## Task 3: Temporal Coverage {.smaller}

We print the temporal range of years for this analytical study.

```{r exploration2}
# Year coverage by country
year_coverage <- combined_dt[!is.na(Value), .(
  min_year = min(Year),
  max_year = max(Year),
  years_covered = length(unique(Year)),
  total_indicators = length(unique(`Indicator Code`))
), by = `Country Name`]

print(year_coverage)
```

------------------------------------------------------------------------

## Task 3: Top Indicators by Data Availability {.smaller}

We find the select to list the top indicators by data availability.

```{r exploration3}
# Most common indicators (by data availability)
indicator_availability <- combined_dt[!is.na(Value), .(
  data_points = .N,
  countries_covered = length(unique(`Country Name`)),
  year_span = max(Year) - min(Year) + 1
), by = .(`Indicator Name`, `Indicator Code`)][
  order(-data_points)
][1:10]

print(indicator_availability)
```

------------------------------------------------------------------------

## Task 4: Analysis Using keyby - GDP Trends {.smaller}

Now we'll perform analysis using `data.table` with the `keyby` argument.

```{r analysis1}
# Filter for GDP per capita indicator
gdp_analysis <- combined_dt[
  `Indicator Code` == "NY.GDP.PCAP.CD" & !is.na(Value),
  .(
    avg_gdp = mean(Value, na.rm = TRUE),
    min_gdp = min(Value, na.rm = TRUE),
    max_gdp = max(Value, na.rm = TRUE),
    years_available = .N
  ),
  keyby = .(`Country Name`)
]

print(gdp_analysis)
```

------------------------------------------------------------------------

## Task 4: Life Expectancy Analysis by Decade {.smaller}

```{r analysis2}
# Life expectancy analysis by decade
life_exp_analysis <- combined_dt[
  `Indicator Code` == "SP.DYN.LE00.IN" & !is.na(Value),
  .(
    avg_life_exp = round(mean(Value, na.rm = TRUE), 2),
    improvement = round(max(Value, na.rm = TRUE) - min(Value, na.rm = TRUE), 2),
    data_points = .N
  ),
  keyby = .(`Country Name`, decade = (Year %/% 10) * 10)
]

print(life_exp_analysis)
```

------------------------------------------------------------------------

## Task 4: Education Analysis {.smaller}

```{r analysis3}
# Education analysis - School enrollment
education_analysis <- combined_dt[
  `Indicator Code` %like% "SE.PRM.ENRR" & !is.na(Value),
  .(
    avg_enrollment = round(mean(Value, na.rm = TRUE), 2),
    trend_slope = if(.N > 1) round(coef(lm(Value ~ Year))[2], 4) else NA_real_,
    recent_value = Value[Year == max(Year)][1]
  ),
  keyby = .(`Country Name`, `Indicator Name`)
]

print(education_analysis)
```

------------------------------------------------------------------------

## Task 5: Plot 1 - GDP Per Capita Trends {.smaller}

Creating visualizations from our analysis results.

```{r plot1, warning=FALSE, echo=FALSE, fig.width=10, fig.height=6}
# GDP trends over time
gdp_trends <- combined_dt[
  `Indicator Code` == "NY.GDP.PCAP.CD" & !is.na(Value) & Year >= 2000
]

ggplot(gdp_trends, aes(x = Year, y = Value, color = `Country Name`)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    title = "GDP Per Capita Trends (2000-Present)",
    subtitle = "Comparison across three countries",
    x = "Year",
    y = "GDP Per Capita (USD)",
    color = "Country"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    legend.position = "bottom"
  )
```

------------------------------------------------------------------------

## Task 5: Plot 2 - Life Expectancy vs GDP {.smaller}

```{r plot2, warning=FALSE, echo=FALSE, fig.width=10, fig.height=6}
# Create a combined dataset for scatter plot using dcast
library(scales)

# First filter and then reshape the data using dcast
filtered_data <- combined_dt[
  `Indicator Code` %in% c("NY.GDP.PCAP.CD", "SP.DYN.LE00.IN") & 
  !is.na(Value) & Year >= 2010
]

# Use dcast to pivot the data - one row per Country-Year with GDP and Life Exp columns
gdp_life_data <- dcast(
  filtered_data, 
  `Country Name` + Year ~ `Indicator Code`, 
  value.var = "Value"
)

# Rename columns for easier reference
setnames(gdp_life_data, 
         c("NY.GDP.PCAP.CD", "SP.DYN.LE00.IN"), 
         c("gdp", "life_exp"))

# Remove rows with missing values
gdp_life_data <- gdp_life_data[!is.na(gdp) & !is.na(life_exp)]

# Create the scatter plot
ggplot(gdp_life_data, aes(x = gdp, y = life_exp, color = `Country Name`)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, size = 1, formula = y ~ x) +
  scale_x_continuous(labels = scales::dollar_format()) +
  labs(
    title = "Life Expectancy vs GDP Per Capita (2010-Present)",
    subtitle = "Relationship between economic development and health outcomes",
    x = "GDP Per Capita (USD)",
    y = "Life Expectancy (Years)",
    color = "Country"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank()
  )
```

## Task 5: Plots - Miscellaneous Graphs

We output a series of plots to analyse the datasets of each nation.

```{r plot3, warning=FALSE, echo=FALSE, fig.width=10, fig.height=6}
# Load required library
library(tidyr)

# Create analysis ready data file .csv
source("preprocess_data.R")

# Prepare the graphs for data analysis which uses data_cleaning.R for input to generate
# Correlation plots.
source("prepare_graphs (v3).R")

```

------------------------------------------------------------------------

## Key Findings - Economic Development {.smaller}

**GDP Per Capita Analysis:**

The United States maintains the highest per capita value at \$82,769 followed by Germany at \$54,343. The UK ranks last at \$49,464 while demonstrating substantial economic differences between countries. The beta-convergence analysis demonstrates a yearly convergence rate of 0.78% across different nations. The R-squared value of 0.868 demonstrates powerful convergence patterns in the data.

**Economic Insights:**

The United States holds the position of having the highest GDP at \$82,769 during 2023. The analysis demonstrates that all nations maintain steady economic growth throughout their development period.The economic stability patterns show a high correlation of 0.868 which indicates that the development paths of these nations are synchronized.

------------------------------------------------------------------------

## Key Findings - Social Development {.smaller}

**Life Expectancy Trends:**

The research found a strong positive relationship between GDP and life expectancy at 0.499. The three countries show continuous improvement throughout the 64-year period. Wealthier nations consistently show higher life expectancy outcomes

**Educational Outcomes:**

The relationship between tertiary education and economic development stands at 0.700. The analysis of 108 educational observations shows substantial differences between countries. The level of access to higher education directly affects the economic success of a nation. The relationship between unemployment and educational attainment shows a negative correlation of -0.551.

------------------------------------------------------------------------

## Data Quality Assessment {.smaller}

**Completeness by Category:**

Economic indicators: Excellent coverage with 192 GDP observations per country Health indicators: Complete life expectancy data across full timespan Environmental data: Limited coverage with fewer recent year entries Education data: Moderate coverage with 108 tertiary enrollment observations

**Limitations:**

142 duplicate entries needed to be removed during the data cleaning process The unemployment data spans a shorter time period with only 102 observations available Some indicators present gaps in their coverage of recent years Different reporting methodologies may affect cross-country comparisons

------------------------------------------------------------------------

## Methodology Summary {.smaller}

**Data Processing Workflow:**

The data import process combined 176,524 rows from three country datasets. The Value column received numeric conversion for analysis purposes during the class assignment. The data integration process was successful for Germany UK and USA. The analysis processed 2,100 indicators across the 1960-2024 time span. The analysis produced correlation matrices and trend analysis plots through visualization.

**Key `data.table` Features Used:**

-   `keyby` for sorted grouping operations.
-   `.SD` for subset operations.
-   `:=` for efficient column assignment.
-   `%like%` for pattern matching.

1. Efficient duplicate removal reduced dataset by 142 entries Grouped operations enabled country-specific analysis. 
2. Memory-efficient processing of large multi-country dataset. 
3. Streamlined filtering for 2,100 diverse indicators.

------------------------------------------------------------------------

## Conclusions {.smaller}

**Main Insights:**

1. Economic Development: US leads significantly, with 67% higher GDP than UK.
2. Health Outcomes: 0.499 correlation confirms wealth-health relationship strength. 
3. Data Patterns: 64-year timespan reveals consistent upward development trends. 
4. Regional Differences: Anglo-Saxon economies show similar patterns versus Germany.

## Appendix: Session Information {.smaller}

```{r session-info}
# Display session information for reproducibility
sessionInfo()
```

**Data Sources:**

-   World Bank Economic, Social, Environmental Indicators
-   Retrieved from: data.humdata.org
-   Processing date: `r Sys.Date()`
-   Countries analyzed: United States, United Kingdom, Germany

#================================================
# END OF FILE
#================================================
